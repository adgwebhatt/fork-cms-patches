From ddb6eebd380c2c436fc9a897f1b5260461524843 Mon Sep 17 00:00:00 2001
From: Jeroen Desloovere <info@jeroendesloovere.be>
Date: Fri, 6 Jul 2018 13:24:29 +0200
Subject: [PATCH] Add reCAPTCHA - deel 1

---
 composer.json                                 |  3 +-
 composer.lock                                 | 47 +++++++++++-
 .../Modules/Extensions/Engine/Model.php       | 56 +++++++++------
 .../Modules/FormBuilder/Actions/Edit.php      |  6 ++
 .../Modules/FormBuilder/Ajax/SaveField.php    | 13 +++-
 .../Modules/FormBuilder/Engine/Helper.php     | 26 +++----
 .../FormBuilder/Installer/Data/install.sql    |  2 +-
 .../FormBuilder/Installer/Data/locale.xml     |  8 +++
 .../FormBuilder/Installer/Installer.php       |  2 +
 .../FormBuilder/Layout/Templates/Edit.tpl     |  1 +
 .../Modules/Settings/Actions/Index.php        | 28 ++++++++
 .../Settings/Installer/Data/locale.xml        |  8 +++
 .../Modules/FormBuilder/Widgets/Form.php      | 71 ++++++++++++++-----
 13 files changed, 216 insertions(+), 55 deletions(-)

diff --git a/composer.json b/composer.json
index 1ee56a8..2dff3a3 100755
--- a/composer.json
+++ b/composer.json
@@ -23,7 +23,8 @@
         "doctrine/orm": "^2.5",
         "doctrine/doctrine-bundle": "^1.6",
         "bugsnag/bugsnag-symfony": "^1.0",
-        "mead-steve/mono-snag": "^3.0.0"
+        "mead-steve/mono-snag": "^3.0.0",
+        "google/recaptcha": "^1.1"
     },
     "require-dev": {
         "jdorn/sql-formatter": "1.2.17",
diff --git a/composer.lock b/composer.lock
index 4ec349a..5b8e5ab 100755
--- a/composer.lock
+++ b/composer.lock
@@ -4,7 +4,7 @@
         "Read more about it at https://getcomposer.org/doc/01-basic-usage.md#composer-lock-the-lock-file",
         "This file is @generated automatically"
     ],
-    "content-hash": "0530f86b6b87c099bf308681d3603278",
+    "content-hash": "aed499f17f326a4178c5ee59fb26ecd6",
     "packages": [
         {
             "name": "behat/transliterator",
@@ -1027,6 +1027,51 @@
             ],
             "time": "2016-02-02T18:50:42+00:00"
         },
+        {
+            "name": "google/recaptcha",
+            "version": "1.1.3",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/google/recaptcha.git",
+                "reference": "5a56d15ca10a7b75158178752b2ad8f755eb4f78"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/google/recaptcha/zipball/5a56d15ca10a7b75158178752b2ad8f755eb4f78",
+                "reference": "5a56d15ca10a7b75158178752b2ad8f755eb4f78",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.5"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "^4.8"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.1.x-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "ReCaptcha\\": "src/ReCaptcha"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "BSD-3-Clause"
+            ],
+            "description": "Client library for reCAPTCHA, a free service that protect websites from spam and abuse.",
+            "homepage": "http://www.google.com/recaptcha/",
+            "keywords": [
+                "Abuse",
+                "captcha",
+                "recaptcha",
+                "spam"
+            ],
+            "time": "2017-03-09T18:44:34+00:00"
+        },
         {
             "name": "guzzlehttp/guzzle",
             "version": "6.1.1",
diff --git a/src/Backend/Modules/Extensions/Engine/Model.php b/src/Backend/Modules/Extensions/Engine/Model.php
index cbd8711..5818096 100755
--- a/src/Backend/Modules/Extensions/Engine/Model.php
+++ b/src/Backend/Modules/Extensions/Engine/Model.php
@@ -9,6 +9,7 @@ namespace Backend\Modules\Extensions\Engine;
  * file that was distributed with this source code.
  */
 
+use Common\ModulesSettings;
 use Symfony\Component\Filesystem\Filesystem;
 use Symfony\Component\Finder\Finder;
 use Backend\Core\Engine\Authentication as BackendAuthentication;
@@ -571,19 +572,8 @@ class Model
      */
     public static function getModulesThatRequireAkismet()
     {
-        $modules = array();
-        $installedModules = BackendModel::getModules();
-
-        foreach ($installedModules as $module) {
-            $setting = BackendModel::get('fork.settings')->get($module, 'requires_akismet', false);
-            if ($setting) {
-                $modules[] = $module;
-            }
-        }
-
-        return $modules;
+        return self::getModulesThatRequireSetting('akismet');
     }
-
     /**
      * Fetch the list of modules that require Google Maps API key
      *
@@ -591,19 +581,41 @@ class Model
      */
     public static function getModulesThatRequireGoogleMaps()
     {
-        $modules = array();
-        $installedModules = BackendModel::getModules();
-
-        foreach ($installedModules as $module) {
-            $setting = BackendModel::get('fork.settings')->get($module, 'requires_google_maps', false);
-            if ($setting) {
-                $modules[] = $module;
-            }
+        return self::getModulesThatRequireSetting('google_maps');
+    }
+    /**
+     * Fetch the list of modules that require Google Recaptcha API key
+     *
+     * @return array
+     */
+    public static function getModulesThatRequireGoogleRecaptcha()
+    {
+        return self::getModulesThatRequireSetting('google_recaptcha');
+    }
+    /**
+     * Fetch the list of modules that require a certain setting. The setting is affixed by 'requires_'
+     *
+     * @param string $setting
+     *
+     * @return array
+     */
+    private static function getModulesThatRequireSetting($setting)
+    {
+        if ($setting === '') {
+            return [];
         }
-
-        return $modules;
+        /** @var ModulesSettings $moduleSettings */
+        $moduleSettings = BackendModel::get('fork.settings');
+        return array_filter(
+            BackendModel::getModules(),
+            function ($module) use ($moduleSettings, $setting) {
+                $requiresGoogleRecaptcha = $moduleSettings->get($module, 'requires_' . $setting, false);
+                return $requiresGoogleRecaptcha;
+            }
+        );
     }
 
+
     /**
      * Get a given template
      *
diff --git a/src/Backend/Modules/FormBuilder/Actions/Edit.php b/src/Backend/Modules/FormBuilder/Actions/Edit.php
index c92d8af..0e7b7d1 100755
--- a/src/Backend/Modules/FormBuilder/Actions/Edit.php
+++ b/src/Backend/Modules/FormBuilder/Actions/Edit.php
@@ -195,6 +195,12 @@ class Edit extends BackendBaseActionEdit
 
         $this->tpl->assign('id', $this->record['id']);
         $this->tpl->assign('name', $this->record['name']);
+        $recaptchaSiteKey = BackendModel::get('fork.settings')->get('Core', 'google_recaptcha_site_key');
+        $recaptchaSecretKey = BackendModel::get('fork.settings')->get('Core', 'google_recaptcha_secret_key');
+
+        if (!($recaptchaSiteKey || $recaptchaSecretKey)) {
+            $this->tpl->assign('recaptchaMissing', true);
+        }
 
         // parse error messages
         $this->parseErrorMessages();
diff --git a/src/Backend/Modules/FormBuilder/Ajax/SaveField.php b/src/Backend/Modules/FormBuilder/Ajax/SaveField.php
index 22fd3d6..e393603 100755
--- a/src/Backend/Modules/FormBuilder/Ajax/SaveField.php
+++ b/src/Backend/Modules/FormBuilder/Ajax/SaveField.php
@@ -34,7 +34,18 @@ class SaveField extends BackendBaseAJAXAction
         $fieldId = \SpoonFilter::getPostValue('field_id', null, '', 'int');
         $type = \SpoonFilter::getPostValue(
             'type',
-            array('checkbox', 'dropdown', 'datetime', 'heading', 'paragraph', 'radiobutton', 'submit', 'textarea', 'textbox'),
+            array(
+                'checkbox',
+                'dropdown',
+                'datetime',
+                'heading',
+                'paragraph',
+                'radiobutton',
+                'submit',
+                'textarea',
+                'textbox',
+                'recaptcha',
+            ),
             '',
             'string'
         );
diff --git a/src/Backend/Modules/FormBuilder/Engine/Helper.php b/src/Backend/Modules/FormBuilder/Engine/Helper.php
index 42f7cc8..7cea7b3 100755
--- a/src/Backend/Modules/FormBuilder/Engine/Helper.php
+++ b/src/Backend/Modules/FormBuilder/Engine/Helper.php
@@ -50,7 +50,7 @@ class Helper
              * Create form and parse to HTML
              */
             // dropdown
-            if ($field['type'] == 'dropdown') {
+            if ($field['type'] === 'dropdown') {
                 // values and labels are the same
                 $values = array_combine($values, $values);
 
@@ -68,9 +68,9 @@ class Helper
 
                 // get content
                 $fieldHTML = $ddm->parse();
-            } elseif ($field['type'] == 'datetime') {
+            } elseif ($field['type'] === 'datetime') {
                 // create element
-                if ($field['settings']['input_type'] == 'date') {
+                if ($field['settings']['input_type'] === 'date') {
                     // calculate default value
                     $amount = $field['settings']['value_amount'];
                     $type = $field['settings']['value_type'];
@@ -99,13 +99,13 @@ class Helper
 
                 // get content
                 $fieldHTML = $datetime->parse();
-            } elseif ($field['type'] == 'radiobutton') {
+            } elseif ($field['type'] === 'radiobutton') {
                 // create element
                 $rbt = $frm->addRadiobutton($fieldName, $values, $defaultValues);
 
                 // get content
                 $fieldHTML = $rbt->parse();
-            } elseif ($field['type'] == 'checkbox') {
+            } elseif ($field['type'] === 'checkbox') {
                 // rebuild values
                 foreach ($values as $value) {
                     $newValues[] = array('label' => $value, 'value' => $value);
@@ -116,7 +116,7 @@ class Helper
 
                 // get content
                 $fieldHTML = $chk->parse();
-            } elseif ($field['type'] == 'textbox') {
+            } elseif ($field['type'] === 'textbox') {
                 // create element
                 $txt = $frm->addText($fieldName, $defaultValues);
                 $txt->setAttribute('disabled', 'disabled');
@@ -124,7 +124,7 @@ class Helper
 
                 // get content
                 $fieldHTML = $txt->parse();
-            } elseif ($field['type'] == 'textarea') {
+            } elseif ($field['type'] === 'textarea') {
                 // create element
                 $txt = $frm->addTextarea($fieldName, $defaultValues);
                 $txt->setAttribute('cols', 30);
@@ -133,10 +133,12 @@ class Helper
 
                 // get content
                 $fieldHTML = $txt->parse();
-            } elseif ($field['type'] == 'heading') {
+            } elseif ($field['type'] === 'heading') {
                 $fieldHTML = '<h3>' . $values . '</h3>';
-            } elseif ($field['type'] == 'paragraph') {
+            } elseif ($field['type'] === 'paragraph') {
                 $fieldHTML = $values;
+            } elseif ($field['type'] === 'recaptcha') {
+                $fieldHTML = '<p>reCAPTCHA</p>';
             }
 
             /**
@@ -150,13 +152,13 @@ class Helper
             $tpl->assign('required', isset($field['validations']['required']));
 
             // plaintext items
-            if ($field['type'] == 'heading' || $field['type'] == 'paragraph') {
+            if (in_array($field['type'], ['heading', 'paragraph', 'recaptcha'])) {
                 // assign
                 $tpl->assign('content', $fieldHTML);
                 $tpl->assign('plaintext', true);
-            } elseif ($field['type'] == 'checkbox' || $field['type'] == 'radiobutton') {
+            } elseif (in_array($field['type'], ['checkbox', 'radiobutton'])) {
                 // name (prefixed by type)
-                $name = ($field['type'] == 'checkbox') ?
+                $name = ($field['type'] === 'checkbox') ?
                     'chk' . \SpoonFilter::ucfirst($fieldName) :
                     'rbt' . \SpoonFilter::ucfirst($fieldName)
                 ;
diff --git a/src/Backend/Modules/FormBuilder/Installer/Data/install.sql b/src/Backend/Modules/FormBuilder/Installer/Data/install.sql
index 2c9a91a..b705677 100755
--- a/src/Backend/Modules/FormBuilder/Installer/Data/install.sql
+++ b/src/Backend/Modules/FormBuilder/Installer/Data/install.sql
@@ -34,7 +34,7 @@ CREATE TABLE IF NOT EXISTS `forms_data_fields` (
 CREATE TABLE IF NOT EXISTS `forms_fields` (
   `id` int(11) unsigned NOT NULL auto_increment,
   `form_id` int(11) unsigned NOT NULL,
-  `type` enum('textbox','textarea', 'datetime', 'dropdown','checkbox','radiobutton','heading','paragraph','submit') NOT NULL,
+  `type` enum('textbox','textarea', 'datetime', 'dropdown','checkbox','radiobutton','heading','paragraph','submit','recaptcha') NOT NULL,
   `settings` text collate utf8_unicode_ci,
   `sequence` int(11) NULL,
   PRIMARY KEY  (`id`),
diff --git a/src/Backend/Modules/FormBuilder/Installer/Data/locale.xml b/src/Backend/Modules/FormBuilder/Installer/Data/locale.xml
index bad9fb5..ec8f4f6 100755
--- a/src/Backend/Modules/FormBuilder/Installer/Data/locale.xml
+++ b/src/Backend/Modules/FormBuilder/Installer/Data/locale.xml
@@ -435,6 +435,10 @@
         <translation language="sv"><![CDATA[radiokanpp]]></translation>
         <translation language="el"><![CDATA[Πλήκτρο μοναδικής επιλογής]]></translation>
       </item>
+      <item type="label" name="Recaptcha">
+        <translation language="nl"><![CDATA[reCAPTCHA]]></translation>
+        <translation language="en"><![CDATA[reCAPTCHA]]></translation>
+      </item>
       <item type="label" name="Recipient">
         <translation language="nl"><![CDATA[bestemmeling]]></translation>
         <translation language="en"><![CDATA[recipient]]></translation>
@@ -929,6 +933,10 @@
         <translation language="sv"><![CDATA[1 inskick]]></translation>
         <translation language="el"><![CDATA[1 υποβολή]]></translation>
       </item>
+      <item type="message" name="RecaptchaKeysMissing">
+        <translation language="nl"><![CDATA[<strong>Belangrijk</strong>: Één of beide reCAPTCHA keys ontbreken. Voeg ze toe op de <a href="%1$s">installingen pagina</a>]]></translation>
+        <translation language="en"><![CDATA[<strong>Important</strong>: One or both reCAPTCHA keys are missing. Add them on the <a href="%1$s">settings page</a>]]></translation>
+      </item>
       <item type="message" name="SentForms">
         <translation language="nl"><![CDATA[%1$s inzendingen]]></translation>
         <translation language="en"><![CDATA[%1$s submissions]]></translation>
diff --git a/src/Backend/Modules/FormBuilder/Installer/Installer.php b/src/Backend/Modules/FormBuilder/Installer/Installer.php
index 927a9bf..bcfa4e9 100755
--- a/src/Backend/Modules/FormBuilder/Installer/Installer.php
+++ b/src/Backend/Modules/FormBuilder/Installer/Installer.php
@@ -36,6 +36,8 @@ class Installer extends ModuleInstaller
         // module rights
         $this->setModuleRights(1, 'FormBuilder');
 
+        $this->setSetting($this->getModule(), 'requires_google_recaptcha', true);
+
         // action rights
         $this->setActionRights(1, 'FormBuilder', 'Add');
         $this->setActionRights(1, 'FormBuilder', 'Edit');
diff --git a/src/Backend/Modules/FormBuilder/Layout/Templates/Edit.tpl b/src/Backend/Modules/FormBuilder/Layout/Templates/Edit.tpl
index 234e4c1..273204d 100755
--- a/src/Backend/Modules/FormBuilder/Layout/Templates/Edit.tpl
+++ b/src/Backend/Modules/FormBuilder/Layout/Templates/Edit.tpl
@@ -108,6 +108,7 @@
 								<li id="dropdownSelector"><a href="#dropdown" rel="dropdownDialog" class="openFieldDialog">{$lblDropdown|ucfirst}</a></li>
 								<li id="checkboxSelector"><a href="#checkbox" rel="checkboxDialog" class="openFieldDialog">{$lblCheckbox|ucfirst}</a></li>
 								<li id="radiobuttonSelector"><a href="#radiobutton" rel="radiobuttonDialog" class="openFieldDialog">{$lblRadiobutton|ucfirst}</a></li>
+                <li id="recaptchaSelector"><a href="#recaptcha" rel="recaptchaDialog" class="openFieldDialog">{$lblRecaptcha|ucfirst}</a></li>
 							</ul>
 						</div>
 						<div class="options">
diff --git a/src/Backend/Modules/Settings/Actions/Index.php b/src/Backend/Modules/Settings/Actions/Index.php
index badfc8f..cfbcd15 100755
--- a/src/Backend/Modules/Settings/Actions/Index.php
+++ b/src/Backend/Modules/Settings/Actions/Index.php
@@ -39,6 +39,7 @@ class Index extends BackendBaseActionIndex
      */
     private $needsAkismet;
     private $needsGoogleMaps;
+    private $needsGoogleRecaptcha;
 
     /**
      * Execute the action
@@ -50,10 +51,12 @@ class Index extends BackendBaseActionIndex
         // get some data
         $modulesThatRequireAkismet = BackendExtensionsModel::getModulesThatRequireAkismet();
         $modulesThatRequireGoogleMaps = BackendExtensionsModel::getModulesThatRequireGoogleMaps();
+        $modulesThatRequireGoogleRecaptcha = BackendExtensionsModel::getModulesThatRequireGoogleRecaptcha();
 
         // set properties
         $this->needsAkismet = (!empty($modulesThatRequireAkismet));
         $this->needsGoogleMaps = (!empty($modulesThatRequireGoogleMaps));
+        $this->needsGoogleRecaptcha = !empty($modulesThatRequireGoogleRecaptcha);
 
         $this->loadForm();
         $this->validateForm();
@@ -251,6 +254,16 @@ class Index extends BackendBaseActionIndex
                 $this->get('fork.settings')->get('Core', 'google_maps_key', null)
             );
         }
+        if ($this->needsGoogleRecaptcha) {
+            $this->frm->addText(
+                'google_recaptcha_site_key',
+                $this->get('fork.settings')->get('Core', 'google_recaptcha_site_key', null)
+            );
+            $this->frm->addText(
+                'google_recaptcha_secret_key',
+                $this->get('fork.settings')->get('Core', 'google_recaptcha_secret_key', null)
+            );
+        }
 
         // cookies
         $this->frm->addCheckbox('show_cookie_bar', $this->get('fork.settings')->get('Core', 'show_cookie_bar', false));
@@ -270,6 +283,9 @@ class Index extends BackendBaseActionIndex
         if ($this->needsGoogleMaps) {
             $this->tpl->assign('needsGoogleMaps', true);
         }
+        if ($this->needsGoogleRecaptcha) {
+            $this->tpl->assign('needsGoogleRecaptcha', true);
+        }
 
         // parse the form
         $this->frm->parse($this->tpl);
@@ -467,6 +483,18 @@ class Index extends BackendBaseActionIndex
                         $this->frm->getField('google_maps_key')->getValue()
                     );
                 }
+                if ($this->needsGoogleRecaptcha) {
+                    $this->get('fork.settings')->set(
+                        'Core',
+                        'google_recaptcha_site_key',
+                        $this->frm->getField('google_recaptcha_site_key')->getValue()
+                    );
+                    $this->get('fork.settings')->set(
+                        'Core',
+                        'google_recaptcha_secret_key',
+                        $this->frm->getField('google_recaptcha_secret_key')->getValue()
+                    );
+                }
 
                 // date & time formats
                 $this->get('fork.settings')->set('Core', 'time_format', $this->frm->getField('time_format')->getValue());
diff --git a/src/Backend/Modules/Settings/Installer/Data/locale.xml b/src/Backend/Modules/Settings/Installer/Data/locale.xml
index a07b0fd..e9fc58b 100755
--- a/src/Backend/Modules/Settings/Installer/Data/locale.xml
+++ b/src/Backend/Modules/Settings/Installer/Data/locale.xml
@@ -500,5 +500,13 @@
       </item>
     </Settings>
   </Backend>
+  <Frontend>
+    <Core>
+      <item type="error" name="RecaptchaInvalid">
+        <translation language="nl"><![CDATA[Captcha code is ongeldig.]]></translation>
+        <translation language="en"><![CDATA[Captcha code is invalid.]]></translation>
+      </item>
+    </Core>
+  </Frontend>
 </locale>
 
diff --git a/src/Frontend/Modules/FormBuilder/Widgets/Form.php b/src/Frontend/Modules/FormBuilder/Widgets/Form.php
index c62e1f2..9f3879a 100755
--- a/src/Frontend/Modules/FormBuilder/Widgets/Form.php
+++ b/src/Frontend/Modules/FormBuilder/Widgets/Form.php
@@ -43,6 +43,11 @@ class Form extends FrontendBaseWidget
      */
     private $item;
 
+    /**
+     * @var bool
+     */
+    private $hasRecaptchaField;
+
     /**
      * Create form action and strip the identifier parameter.
      *
@@ -165,7 +170,7 @@ class Form extends FrontendBaseWidget
                     null
                 );
 
-                if ($field['type'] == 'dropdown') {
+                if ($field['type'] === 'dropdown') {
                     // values and labels are the same
                     $values = array_combine($values, $values);
 
@@ -223,9 +228,9 @@ class Form extends FrontendBaseWidget
 
                     // get content
                     $item['html'] = $txt->parse();
-                } elseif ($field['type'] == 'datetime') {
+                } elseif ($field['type'] === 'datetime') {
                     // create element
-                    if ($field['settings']['input_type'] == 'date') {
+                    if ($field['settings']['input_type'] === 'date') {
                         // calculate default value
                         $amount = $field['settings']['value_amount'];
                         $type = $field['settings']['value_type'];
@@ -281,12 +286,15 @@ class Form extends FrontendBaseWidget
 
                     // get content
                     $item['html'] = $txt->parse();
-                } elseif ($field['type'] == 'heading') {
+                } elseif ($field['type'] === 'heading') {
                     $item['html'] = '<h3>' . $values . '</h3>';
-                } elseif ($field['type'] == 'paragraph') {
+                } elseif ($field['type'] === 'paragraph') {
                     $item['html'] = $values;
-                } elseif ($field['type'] == 'submit') {
+                } elseif ($field['type'] === 'submit') {
                     $item['html'] = $values;
+                } elseif ($field['type'] === 'recaptcha') {
+                    $this->hasRecaptchaField = true;
+                    continue;
                 }
 
                 // add to list
@@ -319,6 +327,12 @@ class Form extends FrontendBaseWidget
         $this->tpl->assign('formName', $formName);
         $this->tpl->assign('formAction', $this->createAction() . '#' . $formName);
 
+        if ($this->hasRecaptchaField) {
+            $this->header->addJS('https://www.google.com/recaptcha/api.js?hl=' . Locale::frontendLanguage(), false);
+            $this->tpl->assign('hasRecaptchaField', true);
+            $this->tpl->assign('siteKey', FrontendModel::get('fork.settings')->get('Core', 'google_recaptcha_site_key'));
+        }
+
         // got fields
         if (!empty($this->fieldsHTML)) {
             // value of the submit button
@@ -326,11 +340,11 @@ class Form extends FrontendBaseWidget
 
             // loop html fields
             foreach ($this->fieldsHTML as &$field) {
-                if ($field['type'] == 'heading' || $field['type'] == 'paragraph') {
+                if (in_array($field['type'], ['heading', 'paragraph', 'recaptcha'])) {
                     $field['plaintext'] = true;
-                } elseif ($field['type'] == 'checkbox' || $field['type'] == 'radiobutton') {
+                } elseif (in_array($field['type'], ['checkbox', 'radiobutton'])) {
                     // name (prefixed by type)
-                    $name = ($field['type'] == 'checkbox') ?
+                    $name = ($field['type'] === 'checkbox') ?
                         'chk' . \SpoonFilter::toCamelCase($field['name']) :
                         'rbt' . \SpoonFilter::toCamelCase($field['name'])
                     ;
@@ -342,7 +356,7 @@ class Form extends FrontendBaseWidget
 
                     // multiple items
                     $field['multiple'] = true;
-                } elseif ($field['type'] == 'submit') {
+                } elseif ($field['type'] === 'submit') {
                     $submitValue = $field['html'];
                 } else {
                     $field['simple'] = true;
@@ -378,6 +392,7 @@ class Form extends FrontendBaseWidget
         $formName = 'form' . $this->item['id'];
         $this->tpl->assign('formName', $formName);
         $this->tpl->assign('successMessage', $this->item['success_message']);
+
     }
 
     /**
@@ -387,6 +402,28 @@ class Form extends FrontendBaseWidget
     {
         // submitted
         if ($this->frm->isSubmitted()) {
+            if ($this->hasRecaptchaField) {
+                $request = $this->get('request')->request;
+                if (!$request->has('g-recaptcha-response')) {
+                    $this->frm->addError(FL::err('RecaptchaInvalid'));
+                }
+
+                $response = $request->get('g-recaptcha-response');
+
+                $secret = FrontendModel::get('fork.settings')->get('Core', 'google_recaptcha_secret_key');
+
+                if (!$secret) {
+                    $this->frm->addError(FL::err('RecaptchaInvalid'));
+                }
+
+                $recaptcha = new ReCaptcha($secret);
+
+                $response = $recaptcha->verify($response);
+
+                if (!$response->isSuccess()) {
+                    $this->frm->addError(FL::err('RecaptchaInvalid'));
+                }
+            }
             // does the key exists?
             if (\SpoonSession::exists('formbuilder_' . $this->item['id'])) {
                 // calculate difference
@@ -404,7 +441,7 @@ class Form extends FrontendBaseWidget
                 $fieldName = 'field' . $field['id'];
 
                 // skip
-                if ($field['type'] == 'submit' || $field['type'] == 'paragraph' || $field['type'] == 'heading') {
+                if (in_array($field['type'], ['submit', 'paragraph', 'heading', 'recaptcha'])) {
                     continue;
                 }
 
@@ -416,23 +453,23 @@ class Form extends FrontendBaseWidget
                     }
 
                     // required
-                    if ($rule == 'required') {
+                    if ($rule === 'required') {
                         $this->frm->getField($fieldName)->isFilled($settings['error_message']);
-                    } elseif ($rule == 'email') {
+                    } elseif ($rule === 'email') {
                         // only check this if the field is filled, if the field is required it will be validated before
                         if ($this->frm->getField($fieldName)->isFilled()) {
                             $this->frm->getField($fieldName)->isEmail(
                                 $settings['error_message']
                             );
                         }
-                    } elseif ($rule == 'numeric') {
+                    } elseif ($rule === 'numeric') {
                         // only check this if the field is filled, if the field is required it will be validated before
                         if ($this->frm->getField($fieldName)->isFilled()) {
                             $this->frm->getField($fieldName)->isNumeric(
                                 $settings['error_message']
                             );
                         }
-                    } elseif ($rule == 'time') {
+                    } elseif ($rule === 'time') {
                         $regexTime = '/^(([0-1][0-9]|2[0-3]|[0-9])|([0-1][0-9]|2[0-3]|[0-9])(:|h)[0-5]?[0-9]?)$/';
                         if (!\SpoonFilter::isValidAgainstRegexp($regexTime, $this->frm->getField($fieldName)->getValue())) {
                             $this->frm->getField($fieldName)->setError($settings['error_message']);
@@ -458,7 +495,7 @@ class Form extends FrontendBaseWidget
                 // loop all fields
                 foreach ($this->item['fields'] as $field) {
                     // skip
-                    if ($field['type'] == 'submit' || $field['type'] == 'paragraph' || $field['type'] == 'heading') {
+                    if (in_array($field['type'], ['submit', 'paragraph', 'heading', 'recaptcha'])) {
                         continue;
                     }
 
@@ -467,7 +504,7 @@ class Form extends FrontendBaseWidget
                     $fieldData['label'] = $field['settings']['label'];
                     $fieldData['value'] = $this->frm->getField('field' . $field['id'])->getValue();
 
-                    if ($field['type'] == 'radiobutton') {
+                    if ($field['type'] === 'radiobutton') {
                         $values = array();
 
                         foreach ($field['settings']['values'] as $value) {
-- 
2.17.1

From f5ea1b66d1ed69dd18bf3030f75bc821b1aa3714 Mon Sep 17 00:00:00 2001
From: Jeroen Desloovere <info@jeroendesloovere.be>
Date: Wed, 18 Jul 2018 14:00:42 +0200
Subject: [PATCH] Finish recaptcha integration

---
 .../Modules/FormBuilder/Js/FormBuilder.js     | 34 +++++++++++++++++++
 .../FormBuilder/Layout/Templates/Edit.tpl     |  2 +-
 .../FormBuilder/Layout/Widgets/Form.tpl       | 17 +++++++---
 .../Modules/FormBuilder/Widgets/Form.php      |  5 ++-
 .../FormBuilder/Layout/Widgets/Form.tpl       | 18 +++++++---
 5 files changed, 65 insertions(+), 11 deletions(-)

diff --git a/src/Backend/Modules/FormBuilder/Js/FormBuilder.js b/src/Backend/Modules/FormBuilder/Js/FormBuilder.js
index b55e301..0a76412 100755
--- a/src/Backend/Modules/FormBuilder/Js/FormBuilder.js
+++ b/src/Backend/Modules/FormBuilder/Js/FormBuilder.js
@@ -311,6 +311,12 @@ jsBackend.formBuilder.fields =
 			// bind
 			if(id !== '') $('#'+ id).dialog('open');
 		});
+
+        $('.jsRecaptchaTrigger').on('click', function (e) {
+            e.preventDefault()
+
+            jsBackend.formBuilder.fields.saveRecaptcha()
+        })
 	},
 
 	/**
@@ -1195,6 +1201,34 @@ jsBackend.formBuilder.fields =
 		});
 	},
 
+    /**
+     * Handle recaptcha save
+     */
+    saveRecaptcha: function () {
+        // make the call
+        $.ajax({
+            data: $.extend({}, jsBackend.formBuilder.fields.paramsSave, {
+                form_id: jsBackend.formBuilder.formId,
+                type: 'recaptcha'
+            }),
+            success: function (data, textStatus) {
+                // success
+                if (data.code === 200) {
+                    // append field html
+                    jsBackend.formBuilder.fields.setField(data.data.field_id, data.data.field_html)
+                } else {
+                    // show error message
+                    jsBackend.messages.add('danger', textStatus)
+                }
+
+                // alert the user
+                if (data.code !== 200 && jsBackend.debug) {
+                    window.alert(data.message)
+                }
+            }
+        })
+    },
+
 	/**
 	 * Handle submit save
 	 */
diff --git a/src/Backend/Modules/FormBuilder/Layout/Templates/Edit.tpl b/src/Backend/Modules/FormBuilder/Layout/Templates/Edit.tpl
index 273204d..80a2e88 100755
--- a/src/Backend/Modules/FormBuilder/Layout/Templates/Edit.tpl
+++ b/src/Backend/Modules/FormBuilder/Layout/Templates/Edit.tpl
@@ -108,7 +108,7 @@
 								<li id="dropdownSelector"><a href="#dropdown" rel="dropdownDialog" class="openFieldDialog">{$lblDropdown|ucfirst}</a></li>
 								<li id="checkboxSelector"><a href="#checkbox" rel="checkboxDialog" class="openFieldDialog">{$lblCheckbox|ucfirst}</a></li>
 								<li id="radiobuttonSelector"><a href="#radiobutton" rel="radiobuttonDialog" class="openFieldDialog">{$lblRadiobutton|ucfirst}</a></li>
-                <li id="recaptchaSelector"><a href="#recaptcha" rel="recaptchaDialog" class="openFieldDialog">{$lblRecaptcha|ucfirst}</a></li>
+								<li id="recaptchaSelector"><a href="#recaptcha" class="jsRecaptchaTrigger">{$lblRecaptcha|ucfirst}</a></li>
 							</ul>
 						</div>
 						<div class="options">
diff --git a/src/Frontend/Modules/FormBuilder/Layout/Widgets/Form.tpl b/src/Frontend/Modules/FormBuilder/Layout/Widgets/Form.tpl
index a3f469a..156b0ac 100755
--- a/src/Frontend/Modules/FormBuilder/Layout/Widgets/Form.tpl
+++ b/src/Frontend/Modules/FormBuilder/Layout/Widgets/Form.tpl
@@ -48,10 +48,19 @@
 							</div>
 						{/option:fields.multiple}
 					{/iteration:fields}
-
-					<p>
-						<input type="submit" value="{$submitValue}" name="submit" class="inputSubmit" />
-					</p>
+					<div class="form-actions">
+						{option:hasRecaptchaField}
+						<script>
+							function recaptcha{$formToken}Submitted (token, data) {
+                document.getElementById("{$formName}").submit();
+							}
+						</script>
+						<p><input type="submit" value="{$submitValue}" class="g-recaptcha inputSubmit btn btn-primary" data-sitekey="{$siteKey}" data-callback="recaptcha{$formToken}Submitted" data-size="invisible" /></p>
+						{/option:hasRecaptchaField}
+						{option:!hasRecaptchaField}
+							<p><input type="submit" value="{$submitValue}" name="submit" class="inputSubmit" /></p>
+						{/option:!hasRecaptchaField}
+					</div>
 				</form>
 			{/option:fields}
 		</div>
diff --git a/src/Frontend/Modules/FormBuilder/Widgets/Form.php b/src/Frontend/Modules/FormBuilder/Widgets/Form.php
index 9f3879a..e31765e 100755
--- a/src/Frontend/Modules/FormBuilder/Widgets/Form.php
+++ b/src/Frontend/Modules/FormBuilder/Widgets/Form.php
@@ -6,11 +6,13 @@ use Common\Exception\RedirectException;
 use Frontend\Core\Engine\Base\Widget as FrontendBaseWidget;
 use Frontend\Core\Engine\Form as FrontendForm;
 use Frontend\Core\Engine\Language as FL;
+use Frontend\Core\Engine\Language;
 use Frontend\Core\Engine\Model as FrontendModel;
 use Frontend\Core\Engine\Template as FrontendTemplate;
 use Frontend\Modules\FormBuilder\Engine\Model as FrontendFormBuilderModel;
 use Frontend\Modules\FormBuilder\FormBuilderEvents;
 use Frontend\Modules\FormBuilder\Event\FormBuilderSubmittedEvent;
+use ReCaptcha\ReCaptcha;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 
 /**
@@ -328,9 +330,10 @@ class Form extends FrontendBaseWidget
         $this->tpl->assign('formAction', $this->createAction() . '#' . $formName);
 
         if ($this->hasRecaptchaField) {
-            $this->header->addJS('https://www.google.com/recaptcha/api.js?hl=' . Locale::frontendLanguage(), false);
+            $this->header->addJS('https://www.google.com/recaptcha/api.js?hl=' . FRONTEND_LANGUAGE, false);
             $this->tpl->assign('hasRecaptchaField', true);
             $this->tpl->assign('siteKey', FrontendModel::get('fork.settings')->get('Core', 'google_recaptcha_site_key'));
+            $this->tpl->assign('jeroen', 'test');
         }
 
         // got fields
diff --git a/src/Frontend/Themes/deman/Modules/FormBuilder/Layout/Widgets/Form.tpl b/src/Frontend/Themes/deman/Modules/FormBuilder/Layout/Widgets/Form.tpl
index 7be305a..d65f076 100755
--- a/src/Frontend/Themes/deman/Modules/FormBuilder/Layout/Widgets/Form.tpl
+++ b/src/Frontend/Themes/deman/Modules/FormBuilder/Layout/Widgets/Form.tpl
@@ -1,11 +1,11 @@
 {* Note: we can use general variables names here since this template is parsed within its own scope *}
 
-<section id="{$formName}">
+<section>
 	{option:successMessage}<div class="alert-box success">{$successMessage}</div>{/option:successMessage}
 	{option:formBuilderError}<div class="alert-box error"><p>{$formBuilderError}</p></div>{/option:formBuilderError}
 
 	{option:fields}
-		<form {option:hidUtf8}accept-charset="UTF-8" {/option:hidUtf8} method="post" action="{$formAction}">
+		<form id="{$formName}" {option:hidUtf8}accept-charset="UTF-8" {/option:hidUtf8} method="post" action="{$formAction}">
 			{option:formToken}
 				<input type="hidden" name="form_token" id="formToken{$formName|ucfirst}" value="{$formToken}" />
 			{/option:formToken}
@@ -47,9 +47,17 @@
 				{/option:fields.multiple}
 			{/iteration:fields}
 
-			<p>
-				<input class="btn btn-secondary" type="submit" value="{$submitValue}" name="submit"/>
-			</p>
+			{option:hasRecaptchaField}
+				<script>
+					function recaptcha{$formToken}Submitted (token, data) {
+						document.getElementById("{$formName}").submit();
+					}
+				</script>
+				<p><input type="submit" value="{$submitValue}" class="g-recaptcha inputSubmit btn btn-secondary" data-sitekey="{$siteKey}" data-callback="recaptcha{$formToken}Submitted" data-size="invisible" /></p>
+			{/option:hasRecaptchaField}
+			{option:!hasRecaptchaField}
+				<p><input class="btn btn-secondary" type="submit" value="{$submitValue}" name="submit"/></p>
+			{/option:!hasRecaptchaField}
 		</form>
 	{/option:fields}
 </section>
-- 
2.17.1

